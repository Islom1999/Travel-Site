import { Model } from "mongoose";
import { ICounter } from "./db/models/counter";
import { ITransaction } from "./db/models/transaction";
export declare enum PaymeIntegratorType {
    CUMULATIVE = "cumulative",
    ONE_TIME = "one-time"
}
export declare type ContructorDetails = {
    type: PaymeIntegratorType;
    db_str: string;
    collection: string;
    password: string;
    isAccountExist(account: any): Promise<boolean>;
    getPayingCost?(account: any): Promise<number>;
    canCancel(account: any): Promise<boolean>;
    markAsCancel(account: any): void;
    markAsPaid(account: any, amount: number): void;
};
export declare class PaymeIntegrator {
    private integratorOptions;
    TransactionModel: Model<ITransaction>;
    CounterModel: Model<ICounter>;
    constructor(integratorOptions: ContructorDetails);
    private initialize;
    authenticate(request: any, reply: any, done?: () => void): Promise<any>;
    handler(request: any, reply: any): Promise<any>;
}
