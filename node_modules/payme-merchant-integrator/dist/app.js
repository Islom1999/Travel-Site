"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymeIntegrator = exports.PaymeIntegratorType = void 0;
const controller_1 = require("./controller");
const connectToDb_1 = require("./db/connectToDb");
const counter_1 = require("./db/models/counter");
const transaction_1 = require("./db/models/transaction");
const errors_1 = require("./errors");
const middleware_1 = require("./middleware");
var PaymeIntegratorType;
(function (PaymeIntegratorType) {
    PaymeIntegratorType["CUMULATIVE"] = "cumulative";
    PaymeIntegratorType["ONE_TIME"] = "one-time";
})(PaymeIntegratorType = exports.PaymeIntegratorType || (exports.PaymeIntegratorType = {}));
class PaymeIntegrator {
    integratorOptions;
    TransactionModel;
    CounterModel;
    constructor(integratorOptions) {
        this.integratorOptions = integratorOptions;
        if (this.integratorOptions.type == PaymeIntegratorType.ONE_TIME &&
            !this.integratorOptions.getPayingCost) {
            throw Error('getPayingCost is required');
        }
        this.initialize();
    }
    async initialize() {
        try {
            (0, connectToDb_1.connectToDb)(this.integratorOptions.db_str);
            this.TransactionModel = (0, transaction_1.getTransactionModel)(this.integratorOptions.collection, this.integratorOptions.type == PaymeIntegratorType.ONE_TIME);
            this.CounterModel = (0, counter_1.getCounterModel)('payme_counters');
        }
        catch (error) {
            console.error(error);
        }
    }
    async authenticate(request, reply, done = () => { }) {
        try {
            await (0, middleware_1.paymeAuthentication)(request, this.integratorOptions.password);
            done();
        }
        catch (error) {
            if (error instanceof errors_1.PaymeErrors) {
                return reply.send(error);
            }
            return reply.send(errors_1.PaymeErrors.InvalidRequest(error.message));
        }
    }
    async handler(request, reply) {
        try {
            const result = await controller_1.MainController.handler(request, this.TransactionModel, this.CounterModel, this.integratorOptions);
            return reply.send({ result });
        }
        catch (error) {
            if (error instanceof errors_1.PaymeErrors) {
                return reply.send(error);
            }
            reply.send(errors_1.PaymeErrors.InvalidRequest(error.message));
        }
    }
}
exports.PaymeIntegrator = PaymeIntegrator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2Q0FBOEM7QUFDOUMsa0RBQStDO0FBQy9DLGlEQUFnRTtBQUNoRSx5REFBNEU7QUFDNUUscUNBQXVDO0FBQ3ZDLDZDQUFrRDtBQUVsRCxJQUFZLG1CQUdYO0FBSEQsV0FBWSxtQkFBbUI7SUFDM0IsZ0RBQXlCLENBQUE7SUFDekIsNENBQXFCLENBQUE7QUFDekIsQ0FBQyxFQUhXLG1CQUFtQixHQUFuQiwyQkFBbUIsS0FBbkIsMkJBQW1CLFFBRzlCO0FBY0QsTUFBYSxlQUFlO0lBSUo7SUFGcEIsZ0JBQWdCLENBQXNCO0lBQ3RDLFlBQVksQ0FBa0I7SUFDOUIsWUFBb0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEQsSUFDSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxJQUFJLG1CQUFtQixDQUFDLFFBQVE7WUFDM0QsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUN2QztZQUNFLE1BQU0sS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUE7U0FDM0M7UUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDckIsQ0FBQztJQUNPLEtBQUssQ0FBQyxVQUFVO1FBQ3BCLElBQUk7WUFDQSxJQUFBLHlCQUFXLEVBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFBLGlDQUFtQixFQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1SSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUEseUJBQWUsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFBO1NBQ3hEO1FBQ0QsT0FBTyxLQUFLLEVBQUU7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ3ZCO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQztRQUN0RCxJQUFJO1lBQ0EsTUFBTSxJQUFBLGdDQUFtQixFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDbkUsSUFBSSxFQUFFLENBQUE7U0FDVDtRQUNELE9BQU8sS0FBSyxFQUFFO1lBQ1YsSUFBSSxLQUFLLFlBQVksb0JBQVcsRUFBRTtnQkFDOUIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQzNCO1lBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1NBQy9EO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUs7UUFDL0IsSUFBSTtZQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sMkJBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3ZILE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLEtBQUssRUFBRTtZQUNWLElBQUksS0FBSyxZQUFZLG9CQUFXLEVBQUU7Z0JBQzlCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUMzQjtZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQVcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7U0FDeEQ7SUFDTCxDQUFDO0NBQ0o7QUFqREQsMENBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kZWwgfSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7IE1haW5Db250cm9sbGVyIH0gZnJvbSBcIi4vY29udHJvbGxlclwiO1xuaW1wb3J0IHsgY29ubmVjdFRvRGIgfSBmcm9tIFwiLi9kYi9jb25uZWN0VG9EYlwiO1xuaW1wb3J0IHsgZ2V0Q291bnRlck1vZGVsLCBJQ291bnRlciB9IGZyb20gXCIuL2RiL21vZGVscy9jb3VudGVyXCI7XG5pbXBvcnQgeyBnZXRUcmFuc2FjdGlvbk1vZGVsLCBJVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi9kYi9tb2RlbHMvdHJhbnNhY3Rpb25cIjtcbmltcG9ydCB7IFBheW1lRXJyb3JzIH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5pbXBvcnQgeyBwYXltZUF1dGhlbnRpY2F0aW9uIH0gZnJvbSBcIi4vbWlkZGxld2FyZVwiXG5cbmV4cG9ydCBlbnVtIFBheW1lSW50ZWdyYXRvclR5cGUge1xuICAgIENVTVVMQVRJVkUgPSAnY3VtdWxhdGl2ZScsXG4gICAgT05FX1RJTUUgPSAnb25lLXRpbWUnXG59XG5cbmV4cG9ydCB0eXBlIENvbnRydWN0b3JEZXRhaWxzID0ge1xuICAgIHR5cGU6IFBheW1lSW50ZWdyYXRvclR5cGUsXG4gICAgZGJfc3RyOiBzdHJpbmc7XG4gICAgY29sbGVjdGlvbjogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgaXNBY2NvdW50RXhpc3QoYWNjb3VudDogYW55KTogUHJvbWlzZTxib29sZWFuPjtcbiAgICBnZXRQYXlpbmdDb3N0PyhhY2NvdW50OiBhbnkpOiBQcm9taXNlPG51bWJlcj47XG4gICAgY2FuQ2FuY2VsKGFjY291bnQ6IGFueSk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgbWFya0FzQ2FuY2VsKGFjY291bnQ6IGFueSk6IHZvaWQ7XG4gICAgbWFya0FzUGFpZChhY2NvdW50OiBhbnksIGFtb3VudDogbnVtYmVyKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFBheW1lSW50ZWdyYXRvciB7XG5cbiAgICBUcmFuc2FjdGlvbk1vZGVsOiBNb2RlbDxJVHJhbnNhY3Rpb24+O1xuICAgIENvdW50ZXJNb2RlbDogTW9kZWw8SUNvdW50ZXI+O1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW50ZWdyYXRvck9wdGlvbnM6IENvbnRydWN0b3JEZXRhaWxzKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaW50ZWdyYXRvck9wdGlvbnMudHlwZSA9PSBQYXltZUludGVncmF0b3JUeXBlLk9ORV9USU1FICYmXG4gICAgICAgICAgICAhdGhpcy5pbnRlZ3JhdG9yT3B0aW9ucy5nZXRQYXlpbmdDb3N0XG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2dldFBheWluZ0Nvc3QgaXMgcmVxdWlyZWQnKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpXG4gICAgfVxuICAgIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbm5lY3RUb0RiKHRoaXMuaW50ZWdyYXRvck9wdGlvbnMuZGJfc3RyKTtcbiAgICAgICAgICAgIHRoaXMuVHJhbnNhY3Rpb25Nb2RlbCA9IGdldFRyYW5zYWN0aW9uTW9kZWwodGhpcy5pbnRlZ3JhdG9yT3B0aW9ucy5jb2xsZWN0aW9uLCB0aGlzLmludGVncmF0b3JPcHRpb25zLnR5cGUgPT0gUGF5bWVJbnRlZ3JhdG9yVHlwZS5PTkVfVElNRSk7XG4gICAgICAgICAgICB0aGlzLkNvdW50ZXJNb2RlbCA9IGdldENvdW50ZXJNb2RlbCgncGF5bWVfY291bnRlcnMnKVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBhdXRoZW50aWNhdGUocmVxdWVzdCwgcmVwbHksIGRvbmUgPSAoKSA9PiB7IH0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHBheW1lQXV0aGVudGljYXRpb24ocmVxdWVzdCwgdGhpcy5pbnRlZ3JhdG9yT3B0aW9ucy5wYXNzd29yZClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUGF5bWVFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwbHkuc2VuZChlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXBseS5zZW5kKFBheW1lRXJyb3JzLkludmFsaWRSZXF1ZXN0KGVycm9yLm1lc3NhZ2UpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGhhbmRsZXIocmVxdWVzdCwgcmVwbHkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IE1haW5Db250cm9sbGVyLmhhbmRsZXIocmVxdWVzdCwgdGhpcy5UcmFuc2FjdGlvbk1vZGVsLCB0aGlzLkNvdW50ZXJNb2RlbCwgdGhpcy5pbnRlZ3JhdG9yT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gcmVwbHkuc2VuZCh7IHJlc3VsdCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFBheW1lRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGx5LnNlbmQoZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBseS5zZW5kKFBheW1lRXJyb3JzLkludmFsaWRSZXF1ZXN0KGVycm9yLm1lc3NhZ2UpKVxuICAgICAgICB9XG4gICAgfVxufVxuIl19