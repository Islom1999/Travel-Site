"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainController = void 0;
const app_1 = require("../app");
const errors_1 = require("../errors");
const payme_dto_1 = require("../validators/dtos/payme.dto");
const validate_1 = require("../validators/validate");
class MainController {
    static params;
    static TransactionModel;
    static CounterModel;
    static async handler(request, TransactionModel, CounterModel, params) {
        // initialize model
        this.params = params;
        this.TransactionModel = TransactionModel;
        this.CounterModel = CounterModel;
        const body = await (0, validate_1.validateIt)(request.body, payme_dto_1.PaymeBodyDto, payme_dto_1.paymeGroups);
        return await this.switchMethod(body);
    }
    static async switchMethod(body) {
        switch (body.method) {
            case payme_dto_1.PaymeMethods.CheckPerformTransaction: {
                return await this.CheckPerformTransaction(body.params);
            }
            case payme_dto_1.PaymeMethods.CreateTransaction: {
                return await this.CreateTransaction(body.params);
            }
            case payme_dto_1.PaymeMethods.PerformTransaction: {
                return await this.PerformTransaction(body.params);
            }
            case payme_dto_1.PaymeMethods.CancelTransaction: {
                return await this.CancelTransaction(body.params);
            }
            case payme_dto_1.PaymeMethods.CheckTransaction: {
                return await this.CheckTransaction(body.params);
            }
            case payme_dto_1.PaymeMethods.GetStatement: {
                return this.GetStatement();
            }
        }
    }
    static validatePaymeAmount(amount) {
        amount /= 100;
        return amount;
    }
    static async CheckPerformTransaction(data) {
        const params = await (0, validate_1.validateIt)(data, payme_dto_1.PaymeParamsDto, [payme_dto_1.PaymeMethods.CheckPerformTransaction]);
        params.amount = this.validatePaymeAmount(params.amount);
        const result = await this.params.isAccountExist(params.account);
        if (!result) {
            throw errors_1.PaymeErrors.InvalidRequest('Account not found');
        }
        if (this.params.type == app_1.PaymeIntegratorType.ONE_TIME) {
            const cost = await this.params.getPayingCost(params.account);
            if (cost != params.amount) {
                throw errors_1.PaymeErrors.InvalidAmount();
            }
        }
        return {
            allow: true
        };
    }
    static async CreateTransaction(data) {
        const params = await (0, validate_1.validateIt)(data, payme_dto_1.PaymeParamsDto, [payme_dto_1.PaymeMethods.CreateTransaction]);
        params.amount = this.validatePaymeAmount(params.amount);
        const result = await this.params.isAccountExist(params.account);
        if (!result) {
            throw errors_1.PaymeErrors.InvalidRequest('Account not found');
        }
        if (this.params.type == app_1.PaymeIntegratorType.ONE_TIME) {
            const cost = await this.params.getPayingCost(params.account);
            if (cost != params.amount) {
                throw errors_1.PaymeErrors.InvalidAmount();
            }
        }
        let tra = await this.TransactionModel.findOne({ id: params.id });
        if (tra) {
            return {
                create_time: tra.create_time,
                transaction: tra.transaction,
                state: tra.state
            };
        }
        if (this.params.type == app_1.PaymeIntegratorType.ONE_TIME) {
            const exist = await this.TransactionModel.findOne({ account: params.account });
            if (exist) {
                if (exist.state > 0) {
                    throw errors_1.PaymeErrors.InvalidRequest('Transaction pending');
                }
                await this.TransactionModel.updateOne({
                    _id: exist._id
                }, {
                    $set: {
                        ...params,
                        create_time: data.time,
                        state: 1,
                    }
                });
                tra = await this.TransactionModel.findById(exist._id);
                return {
                    create_time: tra.create_time,
                    transaction: tra.transaction,
                    state: tra.state
                };
            }
        }
        try {
            const { value: transaction } = await this.CounterModel.findOneAndUpdate({ name: 'payme_transactions' }, { $inc: { value: 1 } }, { new: true, upsert: true });
            const tra_params = {
                ...params,
                create_time: data.time,
                state: 1,
                transaction
            };
            const { _id: saved_id } = await new this.TransactionModel(tra_params).save();
            tra = await this.TransactionModel.findById(saved_id);
        }
        catch (error) {
            if (error.name == 'MongoError' && error.code == 11000) {
                const exist = await this.TransactionModel.findOne({ account: params.account });
                if (!exist) {
                    throw errors_1.PaymeErrors.InvalidRequest('Exists smth');
                }
                return {
                    create_time: exist.create_time,
                    transaction: exist.transaction,
                    state: exist.state
                };
            }
            throw errors_1.PaymeErrors.InvalidRequest('Exists');
        }
        return {
            create_time: tra.create_time,
            transaction: tra.transaction,
            state: tra.state
        };
    }
    static async PerformTransaction(data) {
        const params = await (0, validate_1.validateIt)(data, payme_dto_1.PaymeParamsDto, [payme_dto_1.PaymeMethods.PerformTransaction]);
        const tra = await this.TransactionModel.findOne({
            id: params.id
        });
        if (!tra) {
            throw errors_1.PaymeErrors.TransactionNotFound();
        }
        if (tra.state < 0) {
            throw errors_1.PaymeErrors.UnablePerform();
        }
        if (tra.perform_time) {
            return {
                transaction: tra.transaction,
                perform_time: tra.perform_time,
                state: tra.state
            };
        }
        const time = new Date().getTime();
        // pay here first
        await this.params.markAsPaid(tra.account, tra.amount);
        //
        tra.state = 2;
        tra.perform_time = time;
        await this.TransactionModel.updateOne({ _id: tra._id }, {
            $set: {
                perform_time: time,
                state: 2
            }
        });
        return {
            transaction: tra.transaction,
            perform_time: tra.perform_time,
            state: tra.state
        };
    }
    static async CancelTransaction(data) {
        const params = await (0, validate_1.validateIt)(data, payme_dto_1.PaymeParamsDto, [payme_dto_1.PaymeMethods.CancelTransaction]);
        const tra = await this.TransactionModel.findOne({ id: params.id });
        if (!tra) {
            throw errors_1.PaymeErrors.TransactionNotFound();
        }
        const can_cancel = await this.params.canCancel(tra.account);
        if (!can_cancel && tra.state == 2) {
            throw errors_1.PaymeErrors.OrderIsCompleted();
        }
        const cancel_params = {};
        if (!tra.cancel_time) {
            const cancel_time = new Date().getTime();
            cancel_params.cancel_time = cancel_time;
            tra.cancel_time = cancel_time;
        }
        if (!tra.reason) {
            tra.reason = params.reason;
            cancel_params.reason = params.reason;
        }
        if (tra.state > 0) {
            cancel_params.state = tra.state * (-1);
            tra.state *= (-1);
        }
        await this.TransactionModel.updateOne({ _id: tra._id }, { $set: cancel_params });
        await this.params.markAsCancel(tra.account);
        return {
            transaction: tra.transaction,
            cancel_time: tra.cancel_time,
            state: tra.state
        };
    }
    static async CheckTransaction(data) {
        const params = await (0, validate_1.validateIt)(data, payme_dto_1.PaymeParamsDto, [payme_dto_1.PaymeMethods.CheckTransaction]);
        const tra = await this.TransactionModel.findOne({ id: params.id });
        if (!tra) {
            throw errors_1.PaymeErrors.TransactionNotFound();
        }
        return {
            create_time: tra.create_time,
            perform_time: tra.perform_time,
            cancel_time: tra.cancel_time,
            transaction: tra.transaction,
            state: tra.state,
            reason: tra.reason
        };
    }
    static GetStatement() {
        return {
            transactions: []
        };
    }
}
exports.MainController = MainController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJvbGxlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxnQ0FBNkQ7QUFHN0Qsc0NBQXNDO0FBQ3RDLDREQUFrRztBQUNsRyxxREFBa0Q7QUFFbEQsTUFBYSxjQUFjO0lBRXZCLE1BQU0sQ0FBQyxNQUFNLENBQW9CO0lBQ2pDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBc0I7SUFDN0MsTUFBTSxDQUFDLFlBQVksQ0FBa0I7SUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFDLGdCQUFxQyxFQUFDLFlBQTZCLEVBQUMsTUFBeUI7UUFDN0gsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUVqQyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEscUJBQVUsRUFBQyxPQUFPLENBQUMsSUFBSSxFQUFDLHdCQUFZLEVBQUMsdUJBQVcsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJO1FBQ2xDLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNqQixLQUFLLHdCQUFZLENBQUMsdUJBQXVCLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDekQ7WUFDRCxLQUFLLHdCQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDakMsT0FBTyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7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QUMsQ0FBQyxDQUFBO1FBQ3BGLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sTUFBTSxvQkFBVyxDQUFDLG1CQUFtQixFQUFFLENBQUE7U0FDMUM7UUFDRCxPQUFPO1lBQ0gsV0FBVyxFQUFFLEdBQUcsQ0FBQyxXQUFXO1lBQzVCLFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWTtZQUM5QixXQUFXLEVBQUUsR0FBRyxDQUFDLFdBQVc7WUFDNUIsV0FBVyxFQUFFLEdBQUcsQ0FBQyxXQUFXO1lBQzVCLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztZQUNoQixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07U0FDckIsQ0FBQztJQUNOLENBQUM7SUFFTyxNQUFNLENBQUMsWUFBWTtRQUN2QixPQUFPO1lBQ0gsWUFBWSxFQUFFLEVBQUU7U0FDbkIsQ0FBQTtJQUNMLENBQUM7Q0FFSjtBQTFQRCx3Q0EwUEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZGVsfSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7Q29udHJ1Y3RvckRldGFpbHMsUGF5bWVJbnRlZ3JhdG9yVHlwZX0gZnJvbSBcIi4uL2FwcFwiO1xuaW1wb3J0IHtJQ291bnRlcn0gZnJvbSBcIi4uL2RiL21vZGVscy9jb3VudGVyXCI7XG5pbXBvcnQge0lUcmFuc2FjdGlvbn0gZnJvbSBcIi4uL2RiL21vZGVscy90cmFuc2FjdGlvblwiO1xuaW1wb3J0IHtQYXltZUVycm9yc30gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IHtQYXltZUJvZHlEdG8scGF5bWVHcm91cHMsUGF5bWVNZXRob2RzLFBheW1lUGFyYW1zRHRvfSBmcm9tIFwiLi4vdmFsaWRhdG9ycy9kdG9zL3BheW1lLmR0b1wiO1xuaW1wb3J0IHt2YWxpZGF0ZUl0fSBmcm9tIFwiLi4vdmFsaWRhdG9ycy92YWxpZGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgTWFpbkNvbnRyb2xsZXIge1xuXG4gICAgc3RhdGljIHBhcmFtczogQ29udHJ1Y3RvckRldGFpbHM7XG4gICAgc3RhdGljIFRyYW5zYWN0aW9uTW9kZWw6IE1vZGVsPElUcmFuc2FjdGlvbj47XG4gICAgc3RhdGljIENvdW50ZXJNb2RlbDogTW9kZWw8SUNvdW50ZXI+O1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgaGFuZGxlcihyZXF1ZXN0LFRyYW5zYWN0aW9uTW9kZWw6IE1vZGVsPElUcmFuc2FjdGlvbj4sQ291bnRlck1vZGVsOiBNb2RlbDxJQ291bnRlcj4scGFyYW1zOiBDb250cnVjdG9yRGV0YWlscykge1xuICAgICAgICAvLyBpbml0aWFsaXplIG1vZGVsXG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLlRyYW5zYWN0aW9uTW9kZWwgPSBUcmFuc2FjdGlvbk1vZGVsO1xuICAgICAgICB0aGlzLkNvdW50ZXJNb2RlbCA9IENvdW50ZXJNb2RlbDtcblxuICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgdmFsaWRhdGVJdChyZXF1ZXN0LmJvZHksUGF5bWVCb2R5RHRvLHBheW1lR3JvdXBzKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3dpdGNoTWV0aG9kKGJvZHkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIHN3aXRjaE1ldGhvZChib2R5KSB7XG4gICAgICAgIHN3aXRjaCAoYm9keS5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgUGF5bWVNZXRob2RzLkNoZWNrUGVyZm9ybVRyYW5zYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQ2hlY2tQZXJmb3JtVHJhbnNhY3Rpb24oYm9keS5wYXJhbXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFBheW1lTWV0aG9kcy5DcmVhdGVUcmFuc2FjdGlvbjoge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLkNyZWF0ZVRyYW5zYWN0aW9uKGJvZHkucGFyYW1zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBQYXltZU1ldGhvZHMuUGVyZm9ybVRyYW5zYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuUGVyZm9ybVRyYW5zYWN0aW9uKGJvZHkucGFyYW1zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBQYXltZU1ldGhvZHMuQ2FuY2VsVHJhbnNhY3Rpb246IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5DYW5jZWxUcmFuc2FjdGlvbihib2R5LnBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFBheW1lTWV0aG9kcy5DaGVja1RyYW5zYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuQ2hlY2tUcmFuc2FjdGlvbihib2R5LnBhcmFtcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUGF5bWVNZXRob2RzLkdldFN0YXRlbWVudDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdldFN0YXRlbWVudCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyB2YWxpZGF0ZVBheW1lQW1vdW50KGFtb3VudCkge1xuICAgICAgICBhbW91bnQgLz0gMTAwO1xuICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIENoZWNrUGVyZm9ybVRyYW5zYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgdmFsaWRhdGVJdChkYXRhLFBheW1lUGFyYW1zRHRvLFtQYXltZU1ldGhvZHMuQ2hlY2tQZXJmb3JtVHJhbnNhY3Rpb25dKTtcbiAgICAgICAgcGFyYW1zLmFtb3VudCA9IHRoaXMudmFsaWRhdGVQYXltZUFtb3VudChwYXJhbXMuYW1vdW50KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wYXJhbXMuaXNBY2NvdW50RXhpc3QocGFyYW1zLmFjY291bnQpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgUGF5bWVFcnJvcnMuSW52YWxpZFJlcXVlc3QoJ0FjY291bnQgbm90IGZvdW5kJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy50eXBlID09IFBheW1lSW50ZWdyYXRvclR5cGUuT05FX1RJTUUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvc3QgPSBhd2FpdCB0aGlzLnBhcmFtcy5nZXRQYXlpbmdDb3N0KHBhcmFtcy5hY2NvdW50KTtcbiAgICAgICAgICAgIGlmIChjb3N0ICE9IHBhcmFtcy5hbW91bnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBQYXltZUVycm9ycy5JbnZhbGlkQW1vdW50KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3c6IHRydWVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIENyZWF0ZVRyYW5zYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgdmFsaWRhdGVJdChkYXRhLFBheW1lUGFyYW1zRHRvLFtQYXltZU1ldGhvZHMuQ3JlYXRlVHJhbnNhY3Rpb25dKTtcbiAgICAgICAgcGFyYW1zLmFtb3VudCA9IHRoaXMudmFsaWRhdGVQYXltZUFtb3VudChwYXJhbXMuYW1vdW50KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wYXJhbXMuaXNBY2NvdW50RXhpc3QocGFyYW1zLmFjY291bnQpO1xuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBQYXltZUVycm9ycy5JbnZhbGlkUmVxdWVzdCgnQWNjb3VudCBub3QgZm91bmQnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnR5cGUgPT0gUGF5bWVJbnRlZ3JhdG9yVHlwZS5PTkVfVElNRSkge1xuICAgICAgICAgICAgY29uc3QgY29zdCA9IGF3YWl0IHRoaXMucGFyYW1zLmdldFBheWluZ0Nvc3QocGFyYW1zLmFjY291bnQpO1xuICAgICAgICAgICAgaWYgKGNvc3QgIT0gcGFyYW1zLmFtb3VudCkge1xuICAgICAgICAgICAgICAgIHRocm93IFBheW1lRXJyb3JzLkludmFsaWRBbW91bnQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRyYSA9IGF3YWl0IHRoaXMuVHJhbnNhY3Rpb25Nb2RlbC5maW5kT25lKHtpZDogcGFyYW1zLmlkfSk7XG4gICAgICAgIGlmICh0cmEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlX3RpbWU6IHRyYS5jcmVhdGVfdGltZSxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHJhLnRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgIHN0YXRlOiB0cmEuc3RhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy50eXBlID09IFBheW1lSW50ZWdyYXRvclR5cGUuT05FX1RJTUUpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0ID0gYXdhaXQgdGhpcy5UcmFuc2FjdGlvbk1vZGVsLmZpbmRPbmUoe2FjY291bnQ6IHBhcmFtcy5hY2NvdW50fSk7XG4gICAgICAgICAgICBpZiAoZXhpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3Quc3RhdGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFBheW1lRXJyb3JzLkludmFsaWRSZXF1ZXN0KCdUcmFuc2FjdGlvbiBwZW5kaW5nJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5UcmFuc2FjdGlvbk1vZGVsLnVwZGF0ZU9uZShcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2lkOiBleGlzdC5faWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVfdGltZTogZGF0YS50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgdHJhID0gYXdhaXQgdGhpcy5UcmFuc2FjdGlvbk1vZGVsLmZpbmRCeUlkKGV4aXN0Ll9pZCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVfdGltZTogdHJhLmNyZWF0ZV90aW1lLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHJhLnRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHJhLnN0YXRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7dmFsdWU6IHRyYW5zYWN0aW9ufSA9IGF3YWl0IHRoaXMuQ291bnRlck1vZGVsLmZpbmRPbmVBbmRVcGRhdGUoe25hbWU6ICdwYXltZV90cmFuc2FjdGlvbnMnfSx7JGluYzoge3ZhbHVlOiAxfX0se25ldzogdHJ1ZSx1cHNlcnQ6IHRydWV9KTtcblxuICAgICAgICAgICAgY29uc3QgdHJhX3BhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICAgICAgY3JlYXRlX3RpbWU6IGRhdGEudGltZSxcbiAgICAgICAgICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qge19pZDogc2F2ZWRfaWR9ID0gYXdhaXQgbmV3IHRoaXMuVHJhbnNhY3Rpb25Nb2RlbCh0cmFfcGFyYW1zKS5zYXZlKCk7XG4gICAgICAgICAgICB0cmEgPSBhd2FpdCB0aGlzLlRyYW5zYWN0aW9uTW9kZWwuZmluZEJ5SWQoc2F2ZWRfaWQpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT0gJ01vbmdvRXJyb3InICYmIGVycm9yLmNvZGUgPT0gMTEwMDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdCA9IGF3YWl0IHRoaXMuVHJhbnNhY3Rpb25Nb2RlbC5maW5kT25lKHthY2NvdW50OiBwYXJhbXMuYWNjb3VudH0pXG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBQYXltZUVycm9ycy5JbnZhbGlkUmVxdWVzdCgnRXhpc3RzIHNtdGgnKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZV90aW1lOiBleGlzdC5jcmVhdGVfdGltZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IGV4aXN0LnRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZXhpc3Quc3RhdGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBQYXltZUVycm9ycy5JbnZhbGlkUmVxdWVzdCgnRXhpc3RzJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGVfdGltZTogdHJhLmNyZWF0ZV90aW1lLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyYS50cmFuc2FjdGlvbixcbiAgICAgICAgICAgIHN0YXRlOiB0cmEuc3RhdGVcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgUGVyZm9ybVRyYW5zYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgdmFsaWRhdGVJdChkYXRhLFBheW1lUGFyYW1zRHRvLFtQYXltZU1ldGhvZHMuUGVyZm9ybVRyYW5zYWN0aW9uXSlcblxuICAgICAgICBjb25zdCB0cmEgPSBhd2FpdCB0aGlzLlRyYW5zYWN0aW9uTW9kZWwuZmluZE9uZSh7XG4gICAgICAgICAgICBpZDogcGFyYW1zLmlkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdHJhKSB7XG4gICAgICAgICAgICB0aHJvdyBQYXltZUVycm9ycy5UcmFuc2FjdGlvbk5vdEZvdW5kKClcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhLnN0YXRlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgUGF5bWVFcnJvcnMuVW5hYmxlUGVyZm9ybSgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYS5wZXJmb3JtX3RpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyYS50cmFuc2FjdGlvbixcbiAgICAgICAgICAgICAgICBwZXJmb3JtX3RpbWU6IHRyYS5wZXJmb3JtX3RpbWUsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHRyYS5zdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAvLyBwYXkgaGVyZSBmaXJzdFxuICAgICAgICBhd2FpdCB0aGlzLnBhcmFtcy5tYXJrQXNQYWlkKHRyYS5hY2NvdW50LHRyYS5hbW91bnQpO1xuICAgICAgICAvL1xuICAgICAgICB0cmEuc3RhdGUgPSAyO1xuICAgICAgICB0cmEucGVyZm9ybV90aW1lID0gdGltZTtcbiAgICAgICAgYXdhaXQgdGhpcy5UcmFuc2FjdGlvbk1vZGVsLnVwZGF0ZU9uZShcbiAgICAgICAgICAgIHtfaWQ6IHRyYS5faWR9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybV90aW1lOiB0aW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyYS50cmFuc2FjdGlvbixcbiAgICAgICAgICAgIHBlcmZvcm1fdGltZTogdHJhLnBlcmZvcm1fdGltZSxcbiAgICAgICAgICAgIHN0YXRlOiB0cmEuc3RhdGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIENhbmNlbFRyYW5zYWN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgdmFsaWRhdGVJdChkYXRhLFBheW1lUGFyYW1zRHRvLFtQYXltZU1ldGhvZHMuQ2FuY2VsVHJhbnNhY3Rpb25dKVxuICAgICAgICBjb25zdCB0cmEgPSBhd2FpdCB0aGlzLlRyYW5zYWN0aW9uTW9kZWwuZmluZE9uZSh7aWQ6IHBhcmFtcy5pZH0pO1xuICAgICAgICBpZiAoIXRyYSkge1xuICAgICAgICAgICAgdGhyb3cgUGF5bWVFcnJvcnMuVHJhbnNhY3Rpb25Ob3RGb3VuZCgpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FuX2NhbmNlbCA9IGF3YWl0IHRoaXMucGFyYW1zLmNhbkNhbmNlbCh0cmEuYWNjb3VudClcbiAgICAgICAgaWYgKCFjYW5fY2FuY2VsICYmIHRyYS5zdGF0ZSA9PSAyKSB7XG4gICAgICAgICAgICB0aHJvdyBQYXltZUVycm9ycy5PcmRlcklzQ29tcGxldGVkKClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW5jZWxfcGFyYW1zOiBhbnkgPSB7fVxuICAgICAgICBpZiAoIXRyYS5jYW5jZWxfdGltZSkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsX3RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAgICAgY2FuY2VsX3BhcmFtcy5jYW5jZWxfdGltZSA9IGNhbmNlbF90aW1lXG4gICAgICAgICAgICB0cmEuY2FuY2VsX3RpbWUgPSBjYW5jZWxfdGltZVxuICAgICAgICB9XG4gICAgICAgIGlmICghdHJhLnJlYXNvbikge1xuICAgICAgICAgICAgdHJhLnJlYXNvbiA9IHBhcmFtcy5yZWFzb25cbiAgICAgICAgICAgIGNhbmNlbF9wYXJhbXMucmVhc29uID0gcGFyYW1zLnJlYXNvblxuICAgICAgICB9XG4gICAgICAgIGlmICh0cmEuc3RhdGUgPiAwKSB7XG4gICAgICAgICAgICBjYW5jZWxfcGFyYW1zLnN0YXRlID0gdHJhLnN0YXRlICogKC0xKTtcbiAgICAgICAgICAgIHRyYS5zdGF0ZSAqPSAoLTEpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuVHJhbnNhY3Rpb25Nb2RlbC51cGRhdGVPbmUoe19pZDogdHJhLl9pZH0seyRzZXQ6IGNhbmNlbF9wYXJhbXN9KVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGFyYW1zLm1hcmtBc0NhbmNlbCh0cmEuYWNjb3VudCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cmEudHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBjYW5jZWxfdGltZTogdHJhLmNhbmNlbF90aW1lLFxuICAgICAgICAgICAgc3RhdGU6IHRyYS5zdGF0ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIENoZWNrVHJhbnNhY3Rpb24oZGF0YSkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBhd2FpdCB2YWxpZGF0ZUl0KGRhdGEsUGF5bWVQYXJhbXNEdG8sW1BheW1lTWV0aG9kcy5DaGVja1RyYW5zYWN0aW9uXSlcbiAgICAgICAgY29uc3QgdHJhID0gYXdhaXQgdGhpcy5UcmFuc2FjdGlvbk1vZGVsLmZpbmRPbmUoe2lkOiBwYXJhbXMuaWR9KTtcbiAgICAgICAgaWYgKCF0cmEpIHtcbiAgICAgICAgICAgIHRocm93IFBheW1lRXJyb3JzLlRyYW5zYWN0aW9uTm90Rm91bmQoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGVfdGltZTogdHJhLmNyZWF0ZV90aW1lLFxuICAgICAgICAgICAgcGVyZm9ybV90aW1lOiB0cmEucGVyZm9ybV90aW1lLFxuICAgICAgICAgICAgY2FuY2VsX3RpbWU6IHRyYS5jYW5jZWxfdGltZSxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cmEudHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBzdGF0ZTogdHJhLnN0YXRlLFxuICAgICAgICAgICAgcmVhc29uOiB0cmEucmVhc29uXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgR2V0U3RhdGVtZW50KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBbXVxuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=