"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymeErrors = void 0;
class PaymeErrors {
    error;
    constructor(error = null) {
        this.error = error;
    }
    static InvalidAmount() {
        return new PaymeErrors({
            code: -31001,
            message: {
                ru: 'неправильное количество',
                en: 'wrong amount',
                uz: 'summa xato kiritilgan'
            }
        });
    }
    static UnablePerform() {
        return new PaymeErrors({
            code: -31008,
            message: {
                ru: 'Невозможно выполнить эту операцию',
                en: 'Cannot perform this operation',
                uz: 'Ushbu amalni bajarib bo\'lmaydi'
            }
        });
    }
    static TransactionNotFound() {
        return new PaymeErrors({
            code: -31003,
            message: {
                ru: 'Транзакция не найдена',
                en: 'Transaction not found',
                uz: 'Transaksiya topilmadi'
            }
        });
    }
    static OrderIsCompleted() {
        return new PaymeErrors({
            code: -31007,
            message: {
                ru: 'Заказ выполнен. Невозможно отменить транзакцию. Товар или услуга предоставляется покупателю в полном объеме',
                en: 'The order is completed. Unable to cancel transaction. The product or service is provided to the buyer in full',
                uz: `Buyurtma bajarildi. Tranzaksiya bekor qilinmadi. Mahsulot yoki xizmat xaridorga to'liq hajmda taqdim etiladi`
            }
        });
    }
    static Unauthorization() {
        return new PaymeErrors({
            code: -32504,
            message: {
                ru: 'Недостаточно прав для выполнения метода',
                en: 'There are not enough privileges to execute the method',
                uz: 'Usulni bajarish uchun yetarli imtiyozlar mavjud emas'
            }
        });
    }
    static InvalidRequest(message = 'Invalid Request') {
        return new PaymeErrors({
            code: -31099,
            message: {
                ru: 'Неверный запрос',
                en: message,
                uz: `So‘rov noto‘g‘ri`
            }
        });
    }
}
exports.PaymeErrors = PaymeErrors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLE1BQWEsV0FBVztJQUNEO0lBQW5CLFlBQW1CLFFBQWEsSUFBSTtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZO0lBQ3BDLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYTtRQUNoQixPQUFPLElBQUksV0FBVyxDQUFDO1lBQ25CLElBQUksRUFBRSxDQUFDLEtBQUs7WUFDWixPQUFPLEVBQUU7Z0JBQ0wsRUFBRSxFQUFFLHlCQUF5QjtnQkFDN0IsRUFBRSxFQUFFLGNBQWM7Z0JBQ2xCLEVBQUUsRUFBRSx1QkFBdUI7YUFDOUI7U0FDSixDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWE7UUFDaEIsT0FBTyxJQUFJLFdBQVcsQ0FBQztZQUNuQixJQUFJLEVBQUUsQ0FBQyxLQUFLO1lBQ1osT0FBTyxFQUFFO2dCQUNMLEVBQUUsRUFBRSxtQ0FBbUM7Z0JBQ3ZDLEVBQUUsRUFBRSwrQkFBK0I7Z0JBQ25DLEVBQUUsRUFBRSxpQ0FBaUM7YUFDeEM7U0FDSixDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQjtRQUN0QixPQUFPLElBQUksV0FBVyxDQUFDO1lBQ25CLElBQUksRUFBRSxDQUFDLEtBQUs7WUFDWixPQUFPLEVBQUU7Z0JBQ0wsRUFBRSxFQUFFLHVCQUF1QjtnQkFDM0IsRUFBRSxFQUFFLHVCQUF1QjtnQkFDM0IsRUFBRSxFQUFFLHVCQUF1QjthQUM5QjtTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxXQUFXLENBQUM7WUFDbkIsSUFBSSxFQUFFLENBQUMsS0FBSztZQUNaLE9BQU8sRUFBRTtnQkFDTCxFQUFFLEVBQUUsNkdBQTZHO2dCQUNqSCxFQUFFLEVBQUUsK0dBQStHO2dCQUNuSCxFQUFFLEVBQUUsOEdBQThHO2FBQ3JIO1NBQ0osQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELE1BQU0sQ0FBQyxlQUFlO1FBQ2xCLE9BQU8sSUFBSSxXQUFXLENBQUM7WUFDbkIsSUFBSSxFQUFFLENBQUMsS0FBSztZQUNaLE9BQU8sRUFBRTtnQkFDTCxFQUFFLEVBQUUseUNBQXlDO2dCQUM3QyxFQUFFLEVBQUUsdURBQXVEO2dCQUMzRCxFQUFFLEVBQUUsc0RBQXNEO2FBQzdEO1NBQ0osQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBa0IsaUJBQWlCO1FBQ3JELE9BQU8sSUFBSSxXQUFXLENBQUM7WUFDbkIsSUFBSSxFQUFFLENBQUMsS0FBSztZQUNaLE9BQU8sRUFBRTtnQkFDTCxFQUFFLEVBQUUsaUJBQWlCO2dCQUNyQixFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsa0JBQWtCO2FBQ3pCO1NBQ0osQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUVKO0FBdEVELGtDQXNFQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNsYXNzIFBheW1lRXJyb3JzIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZXJyb3I6IGFueSA9IG51bGwpIHtcbiAgICB9XG5cbiAgICBzdGF0aWMgSW52YWxpZEFtb3VudCgpOiBQYXltZUVycm9ycyB7XG4gICAgICAgIHJldHVybiBuZXcgUGF5bWVFcnJvcnMoe1xuICAgICAgICAgICAgY29kZTogLTMxMDAxLFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgIHJ1OiAn0L3QtdC/0YDQsNCy0LjQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+JyxcbiAgICAgICAgICAgICAgICBlbjogJ3dyb25nIGFtb3VudCcsXG4gICAgICAgICAgICAgICAgdXo6ICdzdW1tYSB4YXRvIGtpcml0aWxnYW4nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIFVuYWJsZVBlcmZvcm0oKTogUGF5bWVFcnJvcnMge1xuICAgICAgICByZXR1cm4gbmV3IFBheW1lRXJyb3JzKHtcbiAgICAgICAgICAgIGNvZGU6IC0zMTAwOCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICBydTogJ9Cd0LXQstC+0LfQvNC+0LbQvdC+INCy0YvQv9C+0LvQvdC40YLRjCDRjdGC0YMg0L7Qv9C10YDQsNGG0LjRjicsXG4gICAgICAgICAgICAgICAgZW46ICdDYW5ub3QgcGVyZm9ybSB0aGlzIG9wZXJhdGlvbicsXG4gICAgICAgICAgICAgICAgdXo6ICdVc2hidSBhbWFsbmkgYmFqYXJpYiBib1xcJ2xtYXlkaSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgVHJhbnNhY3Rpb25Ob3RGb3VuZCgpOiBQYXltZUVycm9ycyB7XG4gICAgICAgIHJldHVybiBuZXcgUGF5bWVFcnJvcnMoe1xuICAgICAgICAgICAgY29kZTogLTMxMDAzLFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgIHJ1OiAn0KLRgNCw0L3Qt9Cw0LrRhtC40Y8g0L3QtSDQvdCw0LnQtNC10L3QsCcsXG4gICAgICAgICAgICAgICAgZW46ICdUcmFuc2FjdGlvbiBub3QgZm91bmQnLFxuICAgICAgICAgICAgICAgIHV6OiAnVHJhbnNha3NpeWEgdG9waWxtYWRpJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBPcmRlcklzQ29tcGxldGVkKCk6IFBheW1lRXJyb3JzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZUVycm9ycyh7XG4gICAgICAgICAgICBjb2RlOiAtMzEwMDcsXG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgcnU6ICfQl9Cw0LrQsNC3INCy0YvQv9C+0LvQvdC10L0uINCd0LXQstC+0LfQvNC+0LbQvdC+INC+0YLQvNC10L3QuNGC0Ywg0YLRgNCw0L3Qt9Cw0LrRhtC40Y4uINCi0L7QstCw0YAg0LjQu9C4INGD0YHQu9GD0LPQsCDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0LXRgtGB0Y8g0L/QvtC60YPQv9Cw0YLQtdC70Y4g0LIg0L/QvtC70L3QvtC8INC+0LHRitC10LzQtScsXG4gICAgICAgICAgICAgICAgZW46ICdUaGUgb3JkZXIgaXMgY29tcGxldGVkLiBVbmFibGUgdG8gY2FuY2VsIHRyYW5zYWN0aW9uLiBUaGUgcHJvZHVjdCBvciBzZXJ2aWNlIGlzIHByb3ZpZGVkIHRvIHRoZSBidXllciBpbiBmdWxsJyxcbiAgICAgICAgICAgICAgICB1ejogYEJ1eXVydG1hIGJhamFyaWxkaS4gVHJhbnpha3NpeWEgYmVrb3IgcWlsaW5tYWRpLiBNYWhzdWxvdCB5b2tpIHhpem1hdCB4YXJpZG9yZ2EgdG8nbGlxIGhham1kYSB0YXFkaW0gZXRpbGFkaWBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgVW5hdXRob3JpemF0aW9uKCk6IFBheW1lRXJyb3JzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZUVycm9ycyh7XG4gICAgICAgICAgICBjb2RlOiAtMzI1MDQsXG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgcnU6ICfQndC10LTQvtGB0YLQsNGC0L7Rh9C90L4g0L/RgNCw0LIg0LTQu9GPINCy0YvQv9C+0LvQvdC10L3QuNGPINC80LXRgtC+0LTQsCcsXG4gICAgICAgICAgICAgICAgZW46ICdUaGVyZSBhcmUgbm90IGVub3VnaCBwcml2aWxlZ2VzIHRvIGV4ZWN1dGUgdGhlIG1ldGhvZCcsXG4gICAgICAgICAgICAgICAgdXo6ICdVc3VsbmkgYmFqYXJpc2ggdWNodW4geWV0YXJsaSBpbXRpeW96bGFyIG1hdmp1ZCBlbWFzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBJbnZhbGlkUmVxdWVzdChtZXNzYWdlOiBzdHJpbmcgPSAnSW52YWxpZCBSZXF1ZXN0Jyk6IFBheW1lRXJyb3JzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZUVycm9ycyh7XG4gICAgICAgICAgICBjb2RlOiAtMzEwOTksXG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgcnU6ICfQndC10LLQtdGA0L3Ri9C5INC30LDQv9GA0L7RgScsXG4gICAgICAgICAgICAgICAgZW46IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdXo6IGBTb+KAmHJvdiBub3Rv4oCYZ+KAmHJpYFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxufVxuIl19