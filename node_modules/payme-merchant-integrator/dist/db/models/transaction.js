"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionModel = void 0;
const mongoose_1 = require("mongoose");
const TransactionSchema = {
    id: { type: String },
    time: { type: Number },
    amount: { type: Number },
    account: { type: Object, _id: false },
    create_time: { type: Number },
    perform_time: { type: Number, default: 0 },
    cancel_time: { type: Number, default: 0 },
    state: { type: Number },
    reason: { type: Number, default: null },
    transaction: { type: String },
};
const getTransactionModel = (collection = 'transactions', account_index = false) => {
    const schema = new mongoose_1.Schema(TransactionSchema, { collection });
    schema.index({
        id: 1
    }, {
        name: "payme_business_index",
        unique: true,
        background: true,
    });
    if (account_index) {
        schema.index({
            account: 1
        }, {
            name: "account_index",
            unique: true,
            background: true,
        });
    }
    const TransactionModel = (0, mongoose_1.model)('Transaction', schema);
    if (!account_index) {
        TransactionModel.collection.dropIndex('account_index', (error) => { if (error) {
            console.log(error);
        } });
    }
    return TransactionModel;
};
exports.getTransactionModel = getTransactionModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGIvbW9kZWxzL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF5QztBQWV6QyxNQUFNLGlCQUFpQixHQUFHO0lBQ3RCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDcEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUN0QixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO0lBQ3hCLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtJQUNyQyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO0lBQzdCLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtJQUMxQyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7SUFDekMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUN2QixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDdkMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtDQUNoQyxDQUFBO0FBRU0sTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxjQUFjLEVBQUUsYUFBYSxHQUFHLEtBQUssRUFBRSxFQUFFO0lBRXRGLE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQU0sQ0FBZSxpQkFBaUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFFM0UsTUFBTSxDQUFDLEtBQUssQ0FDUjtRQUNJLEVBQUUsRUFBRSxDQUFDO0tBQ1IsRUFDRDtRQUNJLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsTUFBTSxFQUFFLElBQUk7UUFDWixVQUFVLEVBQUUsSUFBSTtLQUNuQixDQUNKLENBQUM7SUFFRixJQUFJLGFBQWEsRUFBRTtRQUNmLE1BQU0sQ0FBQyxLQUFLLENBQ1I7WUFDSSxPQUFPLEVBQUUsQ0FBQztTQUNiLEVBQ0Q7WUFDSSxJQUFJLEVBQUUsZUFBZTtZQUNyQixNQUFNLEVBQUUsSUFBSTtZQUNaLFVBQVUsRUFBRSxJQUFJO1NBQ25CLENBQ0osQ0FBQztLQUNMO0lBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxJQUFBLGdCQUFLLEVBQWUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXBFLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUksS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUc7SUFFRCxPQUFPLGdCQUFnQixDQUFDO0FBQzVCLENBQUMsQ0FBQTtBQWxDWSxRQUFBLG1CQUFtQix1QkFrQy9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9kZWwsIFNjaGVtYSB9IGZyb20gJ21vbmdvb3NlJztcblxuZXhwb3J0IGludGVyZmFjZSBJVHJhbnNhY3Rpb24ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdGltZTogbnVtYmVyO1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIGFjY291bnQ6IGFueTtcbiAgICBjcmVhdGVfdGltZTogbnVtYmVyO1xuICAgIHBlcmZvcm1fdGltZTogbnVtYmVyO1xuICAgIGNhbmNlbF90aW1lOiBudW1iZXI7XG4gICAgc3RhdGU6IG51bWJlcjtcbiAgICByZWFzb246IG51bWJlcjtcbiAgICB0cmFuc2FjdGlvbjogc3RyaW5nO1xufVxuXG5jb25zdCBUcmFuc2FjdGlvblNjaGVtYSA9IHtcbiAgICBpZDogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICB0aW1lOiB7IHR5cGU6IE51bWJlciB9LFxuICAgIGFtb3VudDogeyB0eXBlOiBOdW1iZXIgfSxcbiAgICBhY2NvdW50OiB7IHR5cGU6IE9iamVjdCwgX2lkOiBmYWxzZSB9LFxuICAgIGNyZWF0ZV90aW1lOiB7IHR5cGU6IE51bWJlciB9LFxuICAgIHBlcmZvcm1fdGltZTogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAgfSxcbiAgICBjYW5jZWxfdGltZTogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAgfSxcbiAgICBzdGF0ZTogeyB0eXBlOiBOdW1iZXIgfSxcbiAgICByZWFzb246IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiBudWxsIH0sXG4gICAgdHJhbnNhY3Rpb246IHsgdHlwZTogU3RyaW5nIH0sXG59XG5cbmV4cG9ydCBjb25zdCBnZXRUcmFuc2FjdGlvbk1vZGVsID0gKGNvbGxlY3Rpb24gPSAndHJhbnNhY3Rpb25zJywgYWNjb3VudF9pbmRleCA9IGZhbHNlKSA9PiB7XG5cbiAgICBjb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hPElUcmFuc2FjdGlvbj4oVHJhbnNhY3Rpb25TY2hlbWEsIHsgY29sbGVjdGlvbiB9KTtcblxuICAgIHNjaGVtYS5pbmRleChcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDFcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJwYXltZV9idXNpbmVzc19pbmRleFwiLFxuICAgICAgICAgICAgdW5pcXVlOiB0cnVlLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogdHJ1ZSxcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoYWNjb3VudF9pbmRleCkge1xuICAgICAgICBzY2hlbWEuaW5kZXgoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYWNjb3VudDogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFjY291bnRfaW5kZXhcIixcbiAgICAgICAgICAgICAgICB1bmlxdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJ1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgVHJhbnNhY3Rpb25Nb2RlbCA9IG1vZGVsPElUcmFuc2FjdGlvbj4oJ1RyYW5zYWN0aW9uJywgc2NoZW1hKTtcblxuICAgIGlmICghYWNjb3VudF9pbmRleCkge1xuICAgICAgICBUcmFuc2FjdGlvbk1vZGVsLmNvbGxlY3Rpb24uZHJvcEluZGV4KCdhY2NvdW50X2luZGV4JywgKGVycm9yKSA9PiB7IGlmIChlcnJvcikgeyBjb25zb2xlLmxvZyhlcnJvcikgfSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb25Nb2RlbDtcbn1cbiJdfQ==